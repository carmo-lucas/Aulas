[
["index.html", "Aulas de R Introdução", " Aulas de R Lucas Chagas Lima do Carmo 2020-03-26 Introdução Para a primeira aula teremos que instalar R através do site https://cran.r-project.org/ e o programa RStudio que é um ambiente de desenvolvimento integrado (IDA) que facilita a o uso do R, ele pode ser baixado para o sistema operacional que você estiver usando neste link https://rstudio.com/products/rstudio/download/ Você deve instalar o R antes do RStudio. "],
["tipos-de-dados.html", "Aula 1 Tipos de Dados", " Aula 1 Tipos de Dados Para esta aula iremos apenas usar o console. Na configuração padrão do RStudio o console é o painel esquerdo-inferior. O console é onde você vai mandar os comandos para o R executar linha a linha. Para comandos mais complicados com várias linhas é mais interessante escrever um script. Para criar um script use o atalho Ctrl + Shift + N no Windows ou Cmd + Shift + N no MacOs. Primeiro iremos discutir o que são objetos e que tipos de objetos podemos criar ou importar para dentro do R. No R e em outras linguagens de programação existe o conceito de objeto. Um objeto pode ser um vetor ou uma matriz de valores numéricos. Pode ser uma tabela com várias linhas e colunas, pode ser uma fórmula também. O termo objeto é um termo genérico com as aplicações citadas e muitas outras. Para criar um objeto, usamos o operador &lt;-, por exemplo: objeto &lt;- 1000 Este objeto contém o valor 1000 então se você decidir imprimir (print()) este objeto o valor que aparecerá para voce é de 1000. Os objetos podem conter outros tipos de valores também, por exemplo frases: frase &lt;- &quot;The first soft snow: leaves of the awed jonquil bow low&quot; Se você tentar usar print(frase) o resultado vai ser o texto que foi atribuído a este objeto. Outro tipo de objeto são vetores (em outras linguagens de programação são chamados arrays), Vetores são objetos que contém vários valores numéricos ou de texto. vetor &lt;- c(0, 4, 3, 5, 6, 4, 2) print(vetor) ## [1] 0 4 3 5 6 4 2 Até agora foram usadas duas funções: print() e c(). Para você descobrir o que estas funções fazem você pode digitar ?print() ou ?c() no console e ver a definição e os argumentos que elas precisam. Iremos discutir funções mais pra frente mas é bom entender desde o início como achar as informações relevantes para que não se perca tempo. Boa parte de aprender R é pesquisar e ler a documentação das funções que existem no R nativo e nas outras extensões (libraries ou packages) do R que se pode baixar. Em R existem vários tipos de classes de dados mas nesta aula iremos apenas aprender 4 deles: Caracteres (strings): Podem ser letras individuais ou frases longas, são usados como variáveis categóricas para diferenciar os grupos nos seus dados ou para criar anotações em gráficos. Números (integers, numeric, complex): Existem diversas classes de números, podem ser inteiros, decimais ou complexos. Fatores categóricos (factors): Fatores podem ser comparados a strings quando aplicados à distinção entre variáveis categóricas porém uma vantagem é que eles são ordenados e podem possuir níveis, o que strings não possuem. Lógicos (TRUE, FALSE): Valores lógicos servem para avaliar se alguma expressão é verdadeira ou falsa. Um exemplo simples é verificar de 4 é igual a 5. 4 == 5 ## [1] FALSE 1000 &lt;= -23 ## [1] FALSE &quot;abc&quot; == &quot;bca&quot; ## [1] FALSE is.numeric(&quot;c&quot;) ## [1] FALSE Como imaginado, se tentamos avaliar as expressões acima, o resultado é FALSE, agora se tentamos outra expressão que seja verdadeira como as abaixo temos um retorno TRUE 2*10 == 20 ## [1] TRUE 30 &gt; 12 ## [1] TRUE &quot;string&quot; == &quot;string&quot; ## [1] TRUE is.numeric(99) ## [1] TRUE A função ìs.numeric() usada é entendida como a pergunta: “Esse objeto que eu estou te mostrando é numérico?”, se sim, a função retorna TRUE e se não, o retorno é FALSE. Para finalizar a primeira aula faremos alguns exercícios Pesquisem para que servem as funções rep() e seq(); Usem essas funções para criar 3 vetores de qualquer tipo: numérico, string, lógico, etc.; Pesquisem como criar uma matriz e criem uma matriz com o alfabeto como mostrado abaixo. ## [,1] [,2] [,3] [,4] ## [1,] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; ## [2,] &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; ## [3,] &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; ## [4,] &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; ## [5,] &quot;Q&quot; &quot;R&quot; &quot;S&quot; &quot;T&quot; ## [6,] &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; ## [7,] &quot;Y&quot; &quot;Z&quot; &quot;a&quot; &quot;b&quot; ## [8,] &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; ## [9,] &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; ## [10,] &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; ## [11,] &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; ## [12,] &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; ## [13,] &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; "],
["extensões.html", "Aula 2 Extensões", " Aula 2 Extensões Uma forma de trabalhar com o R é usando extensões, comumente chamadas de “packages” ou “libraries”. Extensões são pacotes de funções escritas por outras pessoas cuja finalidade é facilitar algumas operações específicas por exemplo: eu gostaria de criar uma função que retorna a frase Meu nome é &lt;nome&gt; e tenho &lt;idade&gt; anos de idade&gt; onde seja substituido idade e nome pelos dados corretos. # Criando a função nome_idade &lt;- function(nome, idade) { return(paste(&quot;Meu nome é&quot;, nome, &quot;e tenho&quot;, idade, &quot;anos de idade&quot;)) } # Usando a função nome_idade(&quot;Gilson&quot;, 40) ## [1] &quot;Meu nome é Gilson e tenho 40 anos de idade&quot; Neste caso eu escrevi esta função simples para exemplificar, mas os pacotes podem ter muitas funções muito mais complexas que sejam mais difíceis de escrever. "],
["tidyverse.html", "2.1 tidyverse", " 2.1 tidyverse As extensões portanto são pacotes com funções que servem para ajudar a fazer algo específico. Os pacotes que gostaria de focar são os contidos na coleção tidyverse que contém os pacotes: ggplot2, dplyr, readr, tidyr,stringr ,forcats, purrr e tibble. Todos estes pacotes seguem a mesma filosofia de que os dados devem estar organizados de uma forma tidy descrita por Wickham (2014), ou seja: cada coluna é uma variável e cada linha uma observação. Cada um desses pacotes tem uma finalidade específica, com seus conjuntos de funções específicos. 2.1.1 dplyr Odplyr:: é um pacote que serve para manipular os dados no formato de dataframes através de operações de filtragem de linhas (filter()), colunas (select()), agrupamento dos dados de acordo com as variáveis categóricas (group_by()), resumir os dados usando summarise() e reordená-los usando arrange(). Existem cheat sheets que são as “colas” com as funções existentes para os pacotes mais usados e exemplos úteis. Cheat sheet dplyr. 2.1.2 tidyr O pacote tidyr:: é muito útil para organizar os dados da forma que o R e consequentemente os pacotes to tidyverse leiam melhor. As funções mais importantes neste pacote são a pivot_longer(), que substituiu gather() e pivot_wider() que substituiu spread(). Estas funções servem para transformar os dados de um formato “largo” para “longo” e vice-versa. Explicando visualmente é mais fácil de entender, portanto de acordo com o exemplo abaixo: ## # A tibble: 10 x 5 ## Pop. `2009` `2010` `2011` `2012` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a 1 3 54 536 ## 2 b 3 5 3 63 ## 3 c 5 2 6 5 ## 4 d 7 6 2 2 ## 5 e 3 3 4 3 ## 6 f 67 2 7 4 ## 7 g 3 5 3 5 ## 8 h 7 2 5 6 ## 9 i 8 64 7 7 ## 10 j 4 6 8 7 Aqui temos uma tabela no formado “largo”, onde tenho uma coluna por ano. Não há nada de errado com essa formatação, mas usando as funções de base do R e as funções do conjunto tidyverse é mais fácil que transformemos esta tabela para o formato “longo” como no exemplo abaixo. long &lt;- wide %&gt;% tidyr::pivot_longer( cols = &quot;2009&quot;:&quot;2012&quot;, # Quais colunas quero mudar names_to = &quot;Ano&quot;, # Nome da variável que vai conter o nome das colunas values_to = &quot;Valor&quot;) # Nome da variável que vai conter os valores long ## # A tibble: 40 x 3 ## Pop. Ano Valor ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 a 2009 1 ## 2 a 2010 3 ## 3 a 2011 54 ## 4 a 2012 536 ## 5 b 2009 3 ## 6 b 2010 5 ## 7 b 2011 3 ## 8 b 2012 63 ## 9 c 2009 5 ## 10 c 2010 2 ## # ... with 30 more rows O pacote tidyr contém outras funções para separar ou unir valores em colunas. Você pode achar mais informações sobre as funçõs no site do pacote. 2.1.3 readr O pacote readr serve para importar arquivos para dentro do ambiente do R. Este pacote funciona melhor com formatos de data retangular, ou seja, tabelas. As funções principais são: read_csv(): lê arquivos tipo .csv ou .txt com colunas separados por , e decimal como .. read_tsv(): lê arquivos de texto tipo .txt com colunas separadas por tabulação (\\t). read_delim(): com esta função, podem ser lidos arquivos de texto especificando o delimitador usando o argumento delim =, onde delim pode ser qualquer caractere. read_table(): lê arquivos de texto cujas colunas são separadas por espaços em branco. Outro pacote interessante para importar dados para o ambiente do R é ao pacote readxl:: para importar arquivos .xlsx direto do Excel ou o pacote googlesheets:: para importar dados armazenados no seu Google Drive. 2.1.4 stringr Este pacote serve para manipulação, adição, extração, ordenação de strings. Strings são classificadas como qualquer conjunto de caracteres, podendo constituir palavras ou frases ou qualquer sequência de caracteres. Este pacote é muito útil para extrair palavras específicas de textos ou para verificar se algum termo especificado está presente no texto estudado. Stringr Cheat Sheet 2.1.5 tibble tibbles são equivalentes a dataframes, são tabelas que contém dados. A diferença é que alguns tibbles respondem de forma diferente à algumas funções, por exemplo, a nossa tabela “longa” da seção 2.1.2 é uma tibble, portanto quando imprimimos ela no console apenas vemos as primeiras 10 linhas, porém quando tentamos imprimir como um data.frame todas as linhas (até o limite de 1000) são impressas, o que pode ser exagero quando se quer ter noção dos dados. # Imprimindo como tibble print(long) ## # A tibble: 40 x 3 ## Pop. Ano Valor ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 a 2009 1 ## 2 a 2010 3 ## 3 a 2011 54 ## 4 a 2012 536 ## 5 b 2009 3 ## 6 b 2010 5 ## 7 b 2011 3 ## 8 b 2012 63 ## 9 c 2009 5 ## 10 c 2010 2 ## # ... with 30 more rows # Imprimindo como dataframe print(as.data.frame(long)) ## Pop. Ano Valor ## 1 a 2009 1 ## 2 a 2010 3 ## 3 a 2011 54 ## 4 a 2012 536 ## 5 b 2009 3 ## 6 b 2010 5 ## 7 b 2011 3 ## 8 b 2012 63 ## 9 c 2009 5 ## 10 c 2010 2 ## 11 c 2011 6 ## 12 c 2012 5 ## 13 d 2009 7 ## 14 d 2010 6 ## 15 d 2011 2 ## 16 d 2012 2 ## 17 e 2009 3 ## 18 e 2010 3 ## 19 e 2011 4 ## 20 e 2012 3 ## 21 f 2009 67 ## 22 f 2010 2 ## 23 f 2011 7 ## 24 f 2012 4 ## 25 g 2009 3 ## 26 g 2010 5 ## 27 g 2011 3 ## 28 g 2012 5 ## 29 h 2009 7 ## 30 h 2010 2 ## 31 h 2011 5 ## 32 h 2012 6 ## 33 i 2009 8 ## 34 i 2010 64 ## 35 i 2011 7 ## 36 i 2012 7 ## 37 j 2009 4 ## 38 j 2010 6 ## 39 j 2011 8 ## 40 j 2012 7 Este pacote também permite que sejam criadas tabelas usando as funções tibble(), que funciona como data.frame() e tribble() que permite criar tabelas usando uma formatação mais intuitiva. # Função tibble tibble(x = 1:5, y = 1, z = x ^ 2 + y) ## # A tibble: 5 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2 ## 2 2 1 5 ## 3 3 1 10 ## 4 4 1 17 ## 5 5 1 26 # Função tribble tribble( ~x, ~y, ~z, &quot;a&quot;, 2, 3.6, &quot;b&quot;, 1, 8.5 ) ## # A tibble: 2 x 3 ## x y z ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a 2 3.6 ## 2 b 1 8.5 2.1.6 purrr O pacote purrr serve programação funcional, ou seja, aplicação de funções criadas tanto pelo usuário quanto pelos desenvolvedores em vários objetos ao mesmo tempo de forma programática. Este pacote será explorado mais a frente quando outros conhecimentos já estiverem sido consolidados. purrr Cheat Sheet 2.1.7 forcats Este pacote serve para manipulação e ordenação de dados do tipo factor, os fatores, também chamados variáveis categóricas. Pode ser muito útil ordenando variáveis para construção de gráficos, porém sua utilidade é bastante limitada. suas funções serão explicadas de acordo que se tornem úteis. 2.1.8 magrittr Este pacote contém alguns operadores que servem para tornar o código mais amigável a humanos. O operador principal é o pipe que serve para pegar um objeto ou o output de uma função e passá-la à proxima operação, por exemplo: long %&gt;% filter (Ano == \"2010\") onde eu filtro as linhas da tibble long onde o Ano é igual a 2010. Em outros termos, na sintaxe mais matemática se eu tenho g(f(x)) o equivalente com o pipe seria f(x) %&gt;% g() ou até x %&gt;% f() %&gt;% g(). É uma forma de colocar a ordem das operações mais legível para quem está escrevendo ou lendo o código. Além do pipe existem outros operadores que o pacote providencia que serão explorados a medida que forem necessários e utilizados. 2.1.9 ggplot2 O ggplot2por sí merece seu próprio capítulo e várias aulas, porém aqui irei colocar alguns links interessantes para quem estive interessado em ir aprendendo desde já. O capítulo Data Visualization e o capítulo Graphics for communication do livro R for Data Science e o Cheat Sheet um site com vários exemplos de gráficos criados com ggplot2 e outros pacotes, STHDA, outro site com exemplos para gráficos com R Cookbook for R e o livro do Hadley Wickham ggplot2: Elegant Graphics for Data Analysis. "]
]
